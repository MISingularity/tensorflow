// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "speech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace speech {

namespace {

const ::google::protobuf::Descriptor* SpeechInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechOutput_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpeechOutputUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpeechOutputUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMInput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMInput_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMInputUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMInputUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLMOutput_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLMOutput_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_speech_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_speech_2eproto() {
  protobuf_AddDesc_speech_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "speech.proto");
  GOOGLE_CHECK(file != NULL);
  SpeechInput_descriptor_ = file->message_type(0);
  static const int SpeechInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechInput, sinput_),
  };
  SpeechInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeechInput_descriptor_,
      SpeechInput::default_instance_,
      SpeechInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpeechInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechInput, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechInput, _is_default_instance_));
  SpeechOutput_descriptor_ = file->message_type(1);
  static const int SpeechOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutput, soutput_),
  };
  SpeechOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeechOutput_descriptor_,
      SpeechOutput::default_instance_,
      SpeechOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpeechOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutput, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutput, _is_default_instance_));
  SpeechOutputUnit_descriptor_ = file->message_type(2);
  static const int SpeechOutputUnit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutputUnit, pinyins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutputUnit, scores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutputUnit, success_),
  };
  SpeechOutputUnit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpeechOutputUnit_descriptor_,
      SpeechOutputUnit::default_instance_,
      SpeechOutputUnit_offsets_,
      -1,
      -1,
      -1,
      sizeof(SpeechOutputUnit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutputUnit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpeechOutputUnit, _is_default_instance_));
  CLMInput_descriptor_ = file->message_type(3);
  static const int CLMInput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMInput, cinput_),
  };
  CLMInput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLMInput_descriptor_,
      CLMInput::default_instance_,
      CLMInput_offsets_,
      -1,
      -1,
      -1,
      sizeof(CLMInput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMInput, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMInput, _is_default_instance_));
  CLMInputUnit_descriptor_ = file->message_type(4);
  static const int CLMInputUnit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMInputUnit, pinyin_list_),
  };
  CLMInputUnit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLMInputUnit_descriptor_,
      CLMInputUnit::default_instance_,
      CLMInputUnit_offsets_,
      -1,
      -1,
      -1,
      sizeof(CLMInputUnit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMInputUnit, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMInputUnit, _is_default_instance_));
  CLMOutput_descriptor_ = file->message_type(5);
  static const int CLMOutput_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMOutput, coutput_),
  };
  CLMOutput_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CLMOutput_descriptor_,
      CLMOutput::default_instance_,
      CLMOutput_offsets_,
      -1,
      -1,
      -1,
      sizeof(CLMOutput),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMOutput, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLMOutput, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_speech_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeechInput_descriptor_, &SpeechInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeechOutput_descriptor_, &SpeechOutput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpeechOutputUnit_descriptor_, &SpeechOutputUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLMInput_descriptor_, &CLMInput::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLMInputUnit_descriptor_, &CLMInputUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CLMOutput_descriptor_, &CLMOutput::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_speech_2eproto() {
  delete SpeechInput::default_instance_;
  delete SpeechInput_reflection_;
  delete SpeechOutput::default_instance_;
  delete SpeechOutput_reflection_;
  delete SpeechOutputUnit::default_instance_;
  delete SpeechOutputUnit_reflection_;
  delete CLMInput::default_instance_;
  delete CLMInput_reflection_;
  delete CLMInputUnit::default_instance_;
  delete CLMInputUnit_reflection_;
  delete CLMOutput::default_instance_;
  delete CLMOutput_reflection_;
}

void protobuf_AddDesc_speech_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_speech_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014speech.proto\022\006speech\"\035\n\013SpeechInput\022\016\n"
    "\006sinput\030\001 \003(\014\"9\n\014SpeechOutput\022)\n\007soutput"
    "\030\001 \003(\0132\030.speech.SpeechOutputUnit\"D\n\020Spee"
    "chOutputUnit\022\017\n\007pinyins\030\001 \003(\t\022\016\n\006scores\030"
    "\002 \003(\002\022\017\n\007success\030\003 \001(\010\"0\n\010CLMInput\022$\n\006ci"
    "nput\030\001 \003(\0132\024.speech.CLMInputUnit\"#\n\014CLMI"
    "nputUnit\022\023\n\013pinyin_list\030\001 \003(\t\"\034\n\tCLMOutp"
    "ut\022\017\n\007coutput\030\001 \003(\t29\n\003ASR\0222\n\006Speech\022\023.s"
    "peech.SpeechInput\032\021.speech.CLMOutput\"\0002H"
    "\n\006Speech\022>\n\017SpeechRecognize\022\023.speech.Spe"
    "echInput\032\024.speech.SpeechOutput\"\0002=\n\003CLM\022"
    "6\n\rContrainModel\022\020.speech.CLMInput\032\021.spe"
    "ech.CLMOutput\"\000b\006proto3", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speech.proto", &protobuf_RegisterTypes);
  SpeechInput::default_instance_ = new SpeechInput();
  SpeechOutput::default_instance_ = new SpeechOutput();
  SpeechOutputUnit::default_instance_ = new SpeechOutputUnit();
  CLMInput::default_instance_ = new CLMInput();
  CLMInputUnit::default_instance_ = new CLMInputUnit();
  CLMOutput::default_instance_ = new CLMOutput();
  SpeechInput::default_instance_->InitAsDefaultInstance();
  SpeechOutput::default_instance_->InitAsDefaultInstance();
  SpeechOutputUnit::default_instance_->InitAsDefaultInstance();
  CLMInput::default_instance_->InitAsDefaultInstance();
  CLMInputUnit::default_instance_->InitAsDefaultInstance();
  CLMOutput::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_speech_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_speech_2eproto {
  StaticDescriptorInitializer_speech_2eproto() {
    protobuf_AddDesc_speech_2eproto();
  }
} static_descriptor_initializer_speech_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechInput::kSinputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechInput::SpeechInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.SpeechInput)
}

void SpeechInput::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SpeechInput::SpeechInput(const SpeechInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:speech.SpeechInput)
}

void SpeechInput::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

SpeechInput::~SpeechInput() {
  // @@protoc_insertion_point(destructor:speech.SpeechInput)
  SharedDtor();
}

void SpeechInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeechInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechInput_descriptor_;
}

const SpeechInput& SpeechInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechInput* SpeechInput::default_instance_ = NULL;

SpeechInput* SpeechInput::New(::google::protobuf::Arena* arena) const {
  SpeechInput* n = new SpeechInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeechInput::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.SpeechInput)
  sinput_.Clear();
}

bool SpeechInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.SpeechInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes sinput = 1;
      case 1: {
        if (tag == 10) {
         parse_sinput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_sinput()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_sinput;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.SpeechInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.SpeechInput)
  return false;
#undef DO_
}

void SpeechInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.SpeechInput)
  // repeated bytes sinput = 1;
  for (int i = 0; i < this->sinput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sinput(i), output);
  }

  // @@protoc_insertion_point(serialize_end:speech.SpeechInput)
}

::google::protobuf::uint8* SpeechInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.SpeechInput)
  // repeated bytes sinput = 1;
  for (int i = 0; i < this->sinput_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->sinput(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:speech.SpeechInput)
  return target;
}

int SpeechInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:speech.SpeechInput)
  int total_size = 0;

  // repeated bytes sinput = 1;
  total_size += 1 * this->sinput_size();
  for (int i = 0; i < this->sinput_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->sinput(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.SpeechInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeechInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.SpeechInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.SpeechInput)
    MergeFrom(*source);
  }
}

void SpeechInput::MergeFrom(const SpeechInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.SpeechInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  sinput_.MergeFrom(from.sinput_);
}

void SpeechInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.SpeechInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechInput::CopyFrom(const SpeechInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.SpeechInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechInput::IsInitialized() const {

  return true;
}

void SpeechInput::Swap(SpeechInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechInput::InternalSwap(SpeechInput* other) {
  sinput_.UnsafeArenaSwap(&other->sinput_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechInput_descriptor_;
  metadata.reflection = SpeechInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeechInput

// repeated bytes sinput = 1;
int SpeechInput::sinput_size() const {
  return sinput_.size();
}
void SpeechInput::clear_sinput() {
  sinput_.Clear();
}
 const ::std::string& SpeechInput::sinput(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechInput.sinput)
  return sinput_.Get(index);
}
 ::std::string* SpeechInput::mutable_sinput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.SpeechInput.sinput)
  return sinput_.Mutable(index);
}
 void SpeechInput::set_sinput(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.SpeechInput.sinput)
  sinput_.Mutable(index)->assign(value);
}
 void SpeechInput::set_sinput(int index, const char* value) {
  sinput_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.SpeechInput.sinput)
}
 void SpeechInput::set_sinput(int index, const void* value, size_t size) {
  sinput_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.SpeechInput.sinput)
}
 ::std::string* SpeechInput::add_sinput() {
  // @@protoc_insertion_point(field_add_mutable:speech.SpeechInput.sinput)
  return sinput_.Add();
}
 void SpeechInput::add_sinput(const ::std::string& value) {
  sinput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.SpeechInput.sinput)
}
 void SpeechInput::add_sinput(const char* value) {
  sinput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.SpeechInput.sinput)
}
 void SpeechInput::add_sinput(const void* value, size_t size) {
  sinput_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.SpeechInput.sinput)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpeechInput::sinput() const {
  // @@protoc_insertion_point(field_list:speech.SpeechInput.sinput)
  return sinput_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SpeechInput::mutable_sinput() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechInput.sinput)
  return &sinput_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechOutput::kSoutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechOutput::SpeechOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.SpeechOutput)
}

void SpeechOutput::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SpeechOutput::SpeechOutput(const SpeechOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:speech.SpeechOutput)
}

void SpeechOutput::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SpeechOutput::~SpeechOutput() {
  // @@protoc_insertion_point(destructor:speech.SpeechOutput)
  SharedDtor();
}

void SpeechOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeechOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechOutput_descriptor_;
}

const SpeechOutput& SpeechOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechOutput* SpeechOutput::default_instance_ = NULL;

SpeechOutput* SpeechOutput::New(::google::protobuf::Arena* arena) const {
  SpeechOutput* n = new SpeechOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeechOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.SpeechOutput)
  soutput_.Clear();
}

bool SpeechOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.SpeechOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .speech.SpeechOutputUnit soutput = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_soutput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_soutput()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_soutput;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.SpeechOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.SpeechOutput)
  return false;
#undef DO_
}

void SpeechOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.SpeechOutput)
  // repeated .speech.SpeechOutputUnit soutput = 1;
  for (unsigned int i = 0, n = this->soutput_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->soutput(i), output);
  }

  // @@protoc_insertion_point(serialize_end:speech.SpeechOutput)
}

::google::protobuf::uint8* SpeechOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.SpeechOutput)
  // repeated .speech.SpeechOutputUnit soutput = 1;
  for (unsigned int i = 0, n = this->soutput_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->soutput(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:speech.SpeechOutput)
  return target;
}

int SpeechOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:speech.SpeechOutput)
  int total_size = 0;

  // repeated .speech.SpeechOutputUnit soutput = 1;
  total_size += 1 * this->soutput_size();
  for (int i = 0; i < this->soutput_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->soutput(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.SpeechOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeechOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.SpeechOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.SpeechOutput)
    MergeFrom(*source);
  }
}

void SpeechOutput::MergeFrom(const SpeechOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.SpeechOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  soutput_.MergeFrom(from.soutput_);
}

void SpeechOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.SpeechOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechOutput::CopyFrom(const SpeechOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.SpeechOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechOutput::IsInitialized() const {

  return true;
}

void SpeechOutput::Swap(SpeechOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechOutput::InternalSwap(SpeechOutput* other) {
  soutput_.UnsafeArenaSwap(&other->soutput_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechOutput_descriptor_;
  metadata.reflection = SpeechOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeechOutput

// repeated .speech.SpeechOutputUnit soutput = 1;
int SpeechOutput::soutput_size() const {
  return soutput_.size();
}
void SpeechOutput::clear_soutput() {
  soutput_.Clear();
}
const ::speech::SpeechOutputUnit& SpeechOutput::soutput(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutput.soutput)
  return soutput_.Get(index);
}
::speech::SpeechOutputUnit* SpeechOutput::mutable_soutput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.SpeechOutput.soutput)
  return soutput_.Mutable(index);
}
::speech::SpeechOutputUnit* SpeechOutput::add_soutput() {
  // @@protoc_insertion_point(field_add:speech.SpeechOutput.soutput)
  return soutput_.Add();
}
::google::protobuf::RepeatedPtrField< ::speech::SpeechOutputUnit >*
SpeechOutput::mutable_soutput() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechOutput.soutput)
  return &soutput_;
}
const ::google::protobuf::RepeatedPtrField< ::speech::SpeechOutputUnit >&
SpeechOutput::soutput() const {
  // @@protoc_insertion_point(field_list:speech.SpeechOutput.soutput)
  return soutput_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpeechOutputUnit::kPinyinsFieldNumber;
const int SpeechOutputUnit::kScoresFieldNumber;
const int SpeechOutputUnit::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpeechOutputUnit::SpeechOutputUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.SpeechOutputUnit)
}

void SpeechOutputUnit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SpeechOutputUnit::SpeechOutputUnit(const SpeechOutputUnit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:speech.SpeechOutputUnit)
}

void SpeechOutputUnit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
}

SpeechOutputUnit::~SpeechOutputUnit() {
  // @@protoc_insertion_point(destructor:speech.SpeechOutputUnit)
  SharedDtor();
}

void SpeechOutputUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpeechOutputUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpeechOutputUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpeechOutputUnit_descriptor_;
}

const SpeechOutputUnit& SpeechOutputUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

SpeechOutputUnit* SpeechOutputUnit::default_instance_ = NULL;

SpeechOutputUnit* SpeechOutputUnit::New(::google::protobuf::Arena* arena) const {
  SpeechOutputUnit* n = new SpeechOutputUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpeechOutputUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.SpeechOutputUnit)
  success_ = false;
  pinyins_.Clear();
  scores_.Clear();
}

bool SpeechOutputUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.SpeechOutputUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pinyins = 1;
      case 1: {
        if (tag == 10) {
         parse_pinyins:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pinyins()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pinyins(this->pinyins_size() - 1).data(),
            this->pinyins(this->pinyins_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speech.SpeechOutputUnit.pinyins"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pinyins;
        if (input->ExpectTag(18)) goto parse_scores;
        break;
      }

      // repeated float scores = 2;
      case 2: {
        if (tag == 18) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scores())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_scores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_success;
        break;
      }

      // optional bool success = 3;
      case 3: {
        if (tag == 24) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.SpeechOutputUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.SpeechOutputUnit)
  return false;
#undef DO_
}

void SpeechOutputUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.SpeechOutputUnit)
  // repeated string pinyins = 1;
  for (int i = 0; i < this->pinyins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pinyins(i).data(), this->pinyins(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speech.SpeechOutputUnit.pinyins");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pinyins(i), output);
  }

  // repeated float scores = 2;
  if (this->scores_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_scores_cached_byte_size_);
  }
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->scores(i), output);
  }

  // optional bool success = 3;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->success(), output);
  }

  // @@protoc_insertion_point(serialize_end:speech.SpeechOutputUnit)
}

::google::protobuf::uint8* SpeechOutputUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.SpeechOutputUnit)
  // repeated string pinyins = 1;
  for (int i = 0; i < this->pinyins_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pinyins(i).data(), this->pinyins(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speech.SpeechOutputUnit.pinyins");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->pinyins(i), target);
  }

  // repeated float scores = 2;
  if (this->scores_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _scores_cached_byte_size_, target);
  }
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->scores(i), target);
  }

  // optional bool success = 3;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->success(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:speech.SpeechOutputUnit)
  return target;
}

int SpeechOutputUnit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:speech.SpeechOutputUnit)
  int total_size = 0;

  // optional bool success = 3;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // repeated string pinyins = 1;
  total_size += 1 * this->pinyins_size();
  for (int i = 0; i < this->pinyins_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pinyins(i));
  }

  // repeated float scores = 2;
  {
    int data_size = 0;
    data_size = 4 * this->scores_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _scores_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpeechOutputUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.SpeechOutputUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpeechOutputUnit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpeechOutputUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.SpeechOutputUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.SpeechOutputUnit)
    MergeFrom(*source);
  }
}

void SpeechOutputUnit::MergeFrom(const SpeechOutputUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.SpeechOutputUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pinyins_.MergeFrom(from.pinyins_);
  scores_.MergeFrom(from.scores_);
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SpeechOutputUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.SpeechOutputUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpeechOutputUnit::CopyFrom(const SpeechOutputUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.SpeechOutputUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechOutputUnit::IsInitialized() const {

  return true;
}

void SpeechOutputUnit::Swap(SpeechOutputUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpeechOutputUnit::InternalSwap(SpeechOutputUnit* other) {
  pinyins_.UnsafeArenaSwap(&other->pinyins_);
  scores_.UnsafeArenaSwap(&other->scores_);
  std::swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpeechOutputUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpeechOutputUnit_descriptor_;
  metadata.reflection = SpeechOutputUnit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeechOutputUnit

// repeated string pinyins = 1;
int SpeechOutputUnit::pinyins_size() const {
  return pinyins_.size();
}
void SpeechOutputUnit::clear_pinyins() {
  pinyins_.Clear();
}
 const ::std::string& SpeechOutputUnit::pinyins(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutputUnit.pinyins)
  return pinyins_.Get(index);
}
 ::std::string* SpeechOutputUnit::mutable_pinyins(int index) {
  // @@protoc_insertion_point(field_mutable:speech.SpeechOutputUnit.pinyins)
  return pinyins_.Mutable(index);
}
 void SpeechOutputUnit::set_pinyins(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.SpeechOutputUnit.pinyins)
  pinyins_.Mutable(index)->assign(value);
}
 void SpeechOutputUnit::set_pinyins(int index, const char* value) {
  pinyins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.SpeechOutputUnit.pinyins)
}
 void SpeechOutputUnit::set_pinyins(int index, const char* value, size_t size) {
  pinyins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.SpeechOutputUnit.pinyins)
}
 ::std::string* SpeechOutputUnit::add_pinyins() {
  // @@protoc_insertion_point(field_add_mutable:speech.SpeechOutputUnit.pinyins)
  return pinyins_.Add();
}
 void SpeechOutputUnit::add_pinyins(const ::std::string& value) {
  pinyins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.SpeechOutputUnit.pinyins)
}
 void SpeechOutputUnit::add_pinyins(const char* value) {
  pinyins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.SpeechOutputUnit.pinyins)
}
 void SpeechOutputUnit::add_pinyins(const char* value, size_t size) {
  pinyins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.SpeechOutputUnit.pinyins)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpeechOutputUnit::pinyins() const {
  // @@protoc_insertion_point(field_list:speech.SpeechOutputUnit.pinyins)
  return pinyins_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
SpeechOutputUnit::mutable_pinyins() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechOutputUnit.pinyins)
  return &pinyins_;
}

// repeated float scores = 2;
int SpeechOutputUnit::scores_size() const {
  return scores_.size();
}
void SpeechOutputUnit::clear_scores() {
  scores_.Clear();
}
 float SpeechOutputUnit::scores(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutputUnit.scores)
  return scores_.Get(index);
}
 void SpeechOutputUnit::set_scores(int index, float value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:speech.SpeechOutputUnit.scores)
}
 void SpeechOutputUnit::add_scores(float value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:speech.SpeechOutputUnit.scores)
}
 const ::google::protobuf::RepeatedField< float >&
SpeechOutputUnit::scores() const {
  // @@protoc_insertion_point(field_list:speech.SpeechOutputUnit.scores)
  return scores_;
}
 ::google::protobuf::RepeatedField< float >*
SpeechOutputUnit::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechOutputUnit.scores)
  return &scores_;
}

// optional bool success = 3;
void SpeechOutputUnit::clear_success() {
  success_ = false;
}
 bool SpeechOutputUnit::success() const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutputUnit.success)
  return success_;
}
 void SpeechOutputUnit::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:speech.SpeechOutputUnit.success)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLMInput::kCinputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLMInput::CLMInput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.CLMInput)
}

void CLMInput::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CLMInput::CLMInput(const CLMInput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:speech.CLMInput)
}

void CLMInput::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

CLMInput::~CLMInput() {
  // @@protoc_insertion_point(destructor:speech.CLMInput)
  SharedDtor();
}

void CLMInput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMInput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMInput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMInput_descriptor_;
}

const CLMInput& CLMInput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

CLMInput* CLMInput::default_instance_ = NULL;

CLMInput* CLMInput::New(::google::protobuf::Arena* arena) const {
  CLMInput* n = new CLMInput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLMInput::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.CLMInput)
  cinput_.Clear();
}

bool CLMInput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.CLMInput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .speech.CLMInputUnit cinput = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_cinput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cinput()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_cinput;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.CLMInput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.CLMInput)
  return false;
#undef DO_
}

void CLMInput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.CLMInput)
  // repeated .speech.CLMInputUnit cinput = 1;
  for (unsigned int i = 0, n = this->cinput_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cinput(i), output);
  }

  // @@protoc_insertion_point(serialize_end:speech.CLMInput)
}

::google::protobuf::uint8* CLMInput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.CLMInput)
  // repeated .speech.CLMInputUnit cinput = 1;
  for (unsigned int i = 0, n = this->cinput_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cinput(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:speech.CLMInput)
  return target;
}

int CLMInput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:speech.CLMInput)
  int total_size = 0;

  // repeated .speech.CLMInputUnit cinput = 1;
  total_size += 1 * this->cinput_size();
  for (int i = 0; i < this->cinput_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cinput(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMInput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.CLMInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CLMInput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLMInput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.CLMInput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.CLMInput)
    MergeFrom(*source);
  }
}

void CLMInput::MergeFrom(const CLMInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.CLMInput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  cinput_.MergeFrom(from.cinput_);
}

void CLMInput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.CLMInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMInput::CopyFrom(const CLMInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.CLMInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMInput::IsInitialized() const {

  return true;
}

void CLMInput::Swap(CLMInput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLMInput::InternalSwap(CLMInput* other) {
  cinput_.UnsafeArenaSwap(&other->cinput_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLMInput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMInput_descriptor_;
  metadata.reflection = CLMInput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLMInput

// repeated .speech.CLMInputUnit cinput = 1;
int CLMInput::cinput_size() const {
  return cinput_.size();
}
void CLMInput::clear_cinput() {
  cinput_.Clear();
}
const ::speech::CLMInputUnit& CLMInput::cinput(int index) const {
  // @@protoc_insertion_point(field_get:speech.CLMInput.cinput)
  return cinput_.Get(index);
}
::speech::CLMInputUnit* CLMInput::mutable_cinput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.CLMInput.cinput)
  return cinput_.Mutable(index);
}
::speech::CLMInputUnit* CLMInput::add_cinput() {
  // @@protoc_insertion_point(field_add:speech.CLMInput.cinput)
  return cinput_.Add();
}
::google::protobuf::RepeatedPtrField< ::speech::CLMInputUnit >*
CLMInput::mutable_cinput() {
  // @@protoc_insertion_point(field_mutable_list:speech.CLMInput.cinput)
  return &cinput_;
}
const ::google::protobuf::RepeatedPtrField< ::speech::CLMInputUnit >&
CLMInput::cinput() const {
  // @@protoc_insertion_point(field_list:speech.CLMInput.cinput)
  return cinput_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLMInputUnit::kPinyinListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLMInputUnit::CLMInputUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.CLMInputUnit)
}

void CLMInputUnit::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CLMInputUnit::CLMInputUnit(const CLMInputUnit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:speech.CLMInputUnit)
}

void CLMInputUnit::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

CLMInputUnit::~CLMInputUnit() {
  // @@protoc_insertion_point(destructor:speech.CLMInputUnit)
  SharedDtor();
}

void CLMInputUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMInputUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMInputUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMInputUnit_descriptor_;
}

const CLMInputUnit& CLMInputUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

CLMInputUnit* CLMInputUnit::default_instance_ = NULL;

CLMInputUnit* CLMInputUnit::New(::google::protobuf::Arena* arena) const {
  CLMInputUnit* n = new CLMInputUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLMInputUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.CLMInputUnit)
  pinyin_list_.Clear();
}

bool CLMInputUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.CLMInputUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string pinyin_list = 1;
      case 1: {
        if (tag == 10) {
         parse_pinyin_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pinyin_list()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pinyin_list(this->pinyin_list_size() - 1).data(),
            this->pinyin_list(this->pinyin_list_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speech.CLMInputUnit.pinyin_list"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_pinyin_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.CLMInputUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.CLMInputUnit)
  return false;
#undef DO_
}

void CLMInputUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.CLMInputUnit)
  // repeated string pinyin_list = 1;
  for (int i = 0; i < this->pinyin_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pinyin_list(i).data(), this->pinyin_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speech.CLMInputUnit.pinyin_list");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pinyin_list(i), output);
  }

  // @@protoc_insertion_point(serialize_end:speech.CLMInputUnit)
}

::google::protobuf::uint8* CLMInputUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.CLMInputUnit)
  // repeated string pinyin_list = 1;
  for (int i = 0; i < this->pinyin_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pinyin_list(i).data(), this->pinyin_list(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speech.CLMInputUnit.pinyin_list");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->pinyin_list(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:speech.CLMInputUnit)
  return target;
}

int CLMInputUnit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:speech.CLMInputUnit)
  int total_size = 0;

  // repeated string pinyin_list = 1;
  total_size += 1 * this->pinyin_list_size();
  for (int i = 0; i < this->pinyin_list_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pinyin_list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMInputUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.CLMInputUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CLMInputUnit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLMInputUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.CLMInputUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.CLMInputUnit)
    MergeFrom(*source);
  }
}

void CLMInputUnit::MergeFrom(const CLMInputUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.CLMInputUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pinyin_list_.MergeFrom(from.pinyin_list_);
}

void CLMInputUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.CLMInputUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMInputUnit::CopyFrom(const CLMInputUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.CLMInputUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMInputUnit::IsInitialized() const {

  return true;
}

void CLMInputUnit::Swap(CLMInputUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLMInputUnit::InternalSwap(CLMInputUnit* other) {
  pinyin_list_.UnsafeArenaSwap(&other->pinyin_list_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLMInputUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMInputUnit_descriptor_;
  metadata.reflection = CLMInputUnit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLMInputUnit

// repeated string pinyin_list = 1;
int CLMInputUnit::pinyin_list_size() const {
  return pinyin_list_.size();
}
void CLMInputUnit::clear_pinyin_list() {
  pinyin_list_.Clear();
}
 const ::std::string& CLMInputUnit::pinyin_list(int index) const {
  // @@protoc_insertion_point(field_get:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_.Get(index);
}
 ::std::string* CLMInputUnit::mutable_pinyin_list(int index) {
  // @@protoc_insertion_point(field_mutable:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_.Mutable(index);
}
 void CLMInputUnit::set_pinyin_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.CLMInputUnit.pinyin_list)
  pinyin_list_.Mutable(index)->assign(value);
}
 void CLMInputUnit::set_pinyin_list(int index, const char* value) {
  pinyin_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.CLMInputUnit.pinyin_list)
}
 void CLMInputUnit::set_pinyin_list(int index, const char* value, size_t size) {
  pinyin_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.CLMInputUnit.pinyin_list)
}
 ::std::string* CLMInputUnit::add_pinyin_list() {
  // @@protoc_insertion_point(field_add_mutable:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_.Add();
}
 void CLMInputUnit::add_pinyin_list(const ::std::string& value) {
  pinyin_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.CLMInputUnit.pinyin_list)
}
 void CLMInputUnit::add_pinyin_list(const char* value) {
  pinyin_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.CLMInputUnit.pinyin_list)
}
 void CLMInputUnit::add_pinyin_list(const char* value, size_t size) {
  pinyin_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.CLMInputUnit.pinyin_list)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CLMInputUnit::pinyin_list() const {
  // @@protoc_insertion_point(field_list:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CLMInputUnit::mutable_pinyin_list() {
  // @@protoc_insertion_point(field_mutable_list:speech.CLMInputUnit.pinyin_list)
  return &pinyin_list_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CLMOutput::kCoutputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CLMOutput::CLMOutput()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech.CLMOutput)
}

void CLMOutput::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CLMOutput::CLMOutput(const CLMOutput& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:speech.CLMOutput)
}

void CLMOutput::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
}

CLMOutput::~CLMOutput() {
  // @@protoc_insertion_point(destructor:speech.CLMOutput)
  SharedDtor();
}

void CLMOutput::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLMOutput::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLMOutput::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLMOutput_descriptor_;
}

const CLMOutput& CLMOutput::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_speech_2eproto();
  return *default_instance_;
}

CLMOutput* CLMOutput::default_instance_ = NULL;

CLMOutput* CLMOutput::New(::google::protobuf::Arena* arena) const {
  CLMOutput* n = new CLMOutput;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CLMOutput::Clear() {
// @@protoc_insertion_point(message_clear_start:speech.CLMOutput)
  coutput_.Clear();
}

bool CLMOutput::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech.CLMOutput)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string coutput = 1;
      case 1: {
        if (tag == 10) {
         parse_coutput:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_coutput()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->coutput(this->coutput_size() - 1).data(),
            this->coutput(this->coutput_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speech.CLMOutput.coutput"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_coutput;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech.CLMOutput)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech.CLMOutput)
  return false;
#undef DO_
}

void CLMOutput::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech.CLMOutput)
  // repeated string coutput = 1;
  for (int i = 0; i < this->coutput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coutput(i).data(), this->coutput(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speech.CLMOutput.coutput");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->coutput(i), output);
  }

  // @@protoc_insertion_point(serialize_end:speech.CLMOutput)
}

::google::protobuf::uint8* CLMOutput::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech.CLMOutput)
  // repeated string coutput = 1;
  for (int i = 0; i < this->coutput_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->coutput(i).data(), this->coutput(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speech.CLMOutput.coutput");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->coutput(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:speech.CLMOutput)
  return target;
}

int CLMOutput::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:speech.CLMOutput)
  int total_size = 0;

  // repeated string coutput = 1;
  total_size += 1 * this->coutput_size();
  for (int i = 0; i < this->coutput_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->coutput(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLMOutput::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech.CLMOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CLMOutput* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CLMOutput>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech.CLMOutput)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech.CLMOutput)
    MergeFrom(*source);
  }
}

void CLMOutput::MergeFrom(const CLMOutput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech.CLMOutput)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  coutput_.MergeFrom(from.coutput_);
}

void CLMOutput::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech.CLMOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLMOutput::CopyFrom(const CLMOutput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech.CLMOutput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLMOutput::IsInitialized() const {

  return true;
}

void CLMOutput::Swap(CLMOutput* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CLMOutput::InternalSwap(CLMOutput* other) {
  coutput_.UnsafeArenaSwap(&other->coutput_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CLMOutput::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLMOutput_descriptor_;
  metadata.reflection = CLMOutput_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CLMOutput

// repeated string coutput = 1;
int CLMOutput::coutput_size() const {
  return coutput_.size();
}
void CLMOutput::clear_coutput() {
  coutput_.Clear();
}
 const ::std::string& CLMOutput::coutput(int index) const {
  // @@protoc_insertion_point(field_get:speech.CLMOutput.coutput)
  return coutput_.Get(index);
}
 ::std::string* CLMOutput::mutable_coutput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.CLMOutput.coutput)
  return coutput_.Mutable(index);
}
 void CLMOutput::set_coutput(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.CLMOutput.coutput)
  coutput_.Mutable(index)->assign(value);
}
 void CLMOutput::set_coutput(int index, const char* value) {
  coutput_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.CLMOutput.coutput)
}
 void CLMOutput::set_coutput(int index, const char* value, size_t size) {
  coutput_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.CLMOutput.coutput)
}
 ::std::string* CLMOutput::add_coutput() {
  // @@protoc_insertion_point(field_add_mutable:speech.CLMOutput.coutput)
  return coutput_.Add();
}
 void CLMOutput::add_coutput(const ::std::string& value) {
  coutput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.CLMOutput.coutput)
}
 void CLMOutput::add_coutput(const char* value) {
  coutput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.CLMOutput.coutput)
}
 void CLMOutput::add_coutput(const char* value, size_t size) {
  coutput_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.CLMOutput.coutput)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
CLMOutput::coutput() const {
  // @@protoc_insertion_point(field_list:speech.CLMOutput.coutput)
  return coutput_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
CLMOutput::mutable_coutput() {
  // @@protoc_insertion_point(field_mutable_list:speech.CLMOutput.coutput)
  return &coutput_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace speech

// @@protoc_insertion_point(global_scope)
