// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: speech.proto

#include "speech.pb.h"
#include "speech.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace speech {

static const char* ASR_method_names[] = {
  "/speech.ASR/Speech",
};

std::unique_ptr< ASR::Stub> ASR::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< ASR::Stub> stub(new ASR::Stub(channel));
  return stub;
}

ASR::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Speech_(ASR_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ASR::Stub::Speech(::grpc::ClientContext* context, const ::speech::SpeechInput& request, ::speech::CLMOutput* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Speech_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::speech::CLMOutput>* ASR::Stub::AsyncSpeechRaw(::grpc::ClientContext* context, const ::speech::SpeechInput& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::speech::CLMOutput>(channel_.get(), cq, rpcmethod_Speech_, context, request);
}

ASR::Service::Service() {
  (void)ASR_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      ASR_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< ASR::Service, ::speech::SpeechInput, ::speech::CLMOutput>(
          std::mem_fn(&ASR::Service::Speech), this)));
}

ASR::Service::~Service() {
}

::grpc::Status ASR::Service::Speech(::grpc::ServerContext* context, const ::speech::SpeechInput* request, ::speech::CLMOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* Speech_method_names[] = {
  "/speech.Speech/SpeechRecognize",
};

std::unique_ptr< Speech::Stub> Speech::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Speech::Stub> stub(new Speech::Stub(channel));
  return stub;
}

Speech::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SpeechRecognize_(Speech_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Speech::Stub::SpeechRecognize(::grpc::ClientContext* context, const ::speech::SpeechInput& request, ::speech::SpeechOutput* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SpeechRecognize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::speech::SpeechOutput>* Speech::Stub::AsyncSpeechRecognizeRaw(::grpc::ClientContext* context, const ::speech::SpeechInput& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::speech::SpeechOutput>(channel_.get(), cq, rpcmethod_SpeechRecognize_, context, request);
}

Speech::Service::Service() {
  (void)Speech_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      Speech_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Speech::Service, ::speech::SpeechInput, ::speech::SpeechOutput>(
          std::mem_fn(&Speech::Service::SpeechRecognize), this)));
}

Speech::Service::~Service() {
}

::grpc::Status Speech::Service::SpeechRecognize(::grpc::ServerContext* context, const ::speech::SpeechInput* request, ::speech::SpeechOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* CLM_method_names[] = {
  "/speech.CLM/ContrainModel",
};

std::unique_ptr< CLM::Stub> CLM::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CLM::Stub> stub(new CLM::Stub(channel));
  return stub;
}

CLM::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ContrainModel_(CLM_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CLM::Stub::ContrainModel(::grpc::ClientContext* context, const ::speech::CLMInput& request, ::speech::CLMOutput* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_ContrainModel_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::speech::CLMOutput>* CLM::Stub::AsyncContrainModelRaw(::grpc::ClientContext* context, const ::speech::CLMInput& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::speech::CLMOutput>(channel_.get(), cq, rpcmethod_ContrainModel_, context, request);
}

CLM::Service::Service() {
  (void)CLM_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      CLM_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CLM::Service, ::speech::CLMInput, ::speech::CLMOutput>(
          std::mem_fn(&CLM::Service::ContrainModel), this)));
}

CLM::Service::~Service() {
}

::grpc::Status CLM::Service::ContrainModel(::grpc::ServerContext* context, const ::speech::CLMInput* request, ::speech::CLMOutput* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace speech

