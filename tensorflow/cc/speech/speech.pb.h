// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech.proto

#ifndef PROTOBUF_speech_2eproto__INCLUDED
#define PROTOBUF_speech_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace speech {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_speech_2eproto();
void protobuf_AssignDesc_speech_2eproto();
void protobuf_ShutdownFile_speech_2eproto();

class CLMInput;
class CLMInputUnit;
class CLMOutput;
class SpeechInput;
class SpeechOutput;
class SpeechOutputUnit;

// ===================================================================

class SpeechInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speech.SpeechInput) */ {
 public:
  SpeechInput();
  virtual ~SpeechInput();

  SpeechInput(const SpeechInput& from);

  inline SpeechInput& operator=(const SpeechInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechInput& default_instance();

  void Swap(SpeechInput* other);

  // implements Message ----------------------------------------------

  inline SpeechInput* New() const { return New(NULL); }

  SpeechInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeechInput& from);
  void MergeFrom(const SpeechInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpeechInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes sinput = 1;
  int sinput_size() const;
  void clear_sinput();
  static const int kSinputFieldNumber = 1;
  const ::std::string& sinput(int index) const;
  ::std::string* mutable_sinput(int index);
  void set_sinput(int index, const ::std::string& value);
  void set_sinput(int index, const char* value);
  void set_sinput(int index, const void* value, size_t size);
  ::std::string* add_sinput();
  void add_sinput(const ::std::string& value);
  void add_sinput(const char* value);
  void add_sinput(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& sinput() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sinput();

  // @@protoc_insertion_point(class_scope:speech.SpeechInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sinput_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static SpeechInput* default_instance_;
};
// -------------------------------------------------------------------

class SpeechOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speech.SpeechOutput) */ {
 public:
  SpeechOutput();
  virtual ~SpeechOutput();

  SpeechOutput(const SpeechOutput& from);

  inline SpeechOutput& operator=(const SpeechOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechOutput& default_instance();

  void Swap(SpeechOutput* other);

  // implements Message ----------------------------------------------

  inline SpeechOutput* New() const { return New(NULL); }

  SpeechOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeechOutput& from);
  void MergeFrom(const SpeechOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpeechOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .speech.SpeechOutputUnit soutput = 1;
  int soutput_size() const;
  void clear_soutput();
  static const int kSoutputFieldNumber = 1;
  const ::speech::SpeechOutputUnit& soutput(int index) const;
  ::speech::SpeechOutputUnit* mutable_soutput(int index);
  ::speech::SpeechOutputUnit* add_soutput();
  ::google::protobuf::RepeatedPtrField< ::speech::SpeechOutputUnit >*
      mutable_soutput();
  const ::google::protobuf::RepeatedPtrField< ::speech::SpeechOutputUnit >&
      soutput() const;

  // @@protoc_insertion_point(class_scope:speech.SpeechOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::speech::SpeechOutputUnit > soutput_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static SpeechOutput* default_instance_;
};
// -------------------------------------------------------------------

class SpeechOutputUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speech.SpeechOutputUnit) */ {
 public:
  SpeechOutputUnit();
  virtual ~SpeechOutputUnit();

  SpeechOutputUnit(const SpeechOutputUnit& from);

  inline SpeechOutputUnit& operator=(const SpeechOutputUnit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpeechOutputUnit& default_instance();

  void Swap(SpeechOutputUnit* other);

  // implements Message ----------------------------------------------

  inline SpeechOutputUnit* New() const { return New(NULL); }

  SpeechOutputUnit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpeechOutputUnit& from);
  void MergeFrom(const SpeechOutputUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpeechOutputUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string pinyins = 1;
  int pinyins_size() const;
  void clear_pinyins();
  static const int kPinyinsFieldNumber = 1;
  const ::std::string& pinyins(int index) const;
  ::std::string* mutable_pinyins(int index);
  void set_pinyins(int index, const ::std::string& value);
  void set_pinyins(int index, const char* value);
  void set_pinyins(int index, const char* value, size_t size);
  ::std::string* add_pinyins();
  void add_pinyins(const ::std::string& value);
  void add_pinyins(const char* value);
  void add_pinyins(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pinyins() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pinyins();

  // repeated float scores = 2;
  int scores_size() const;
  void clear_scores();
  static const int kScoresFieldNumber = 2;
  float scores(int index) const;
  void set_scores(int index, float value);
  void add_scores(float value);
  const ::google::protobuf::RepeatedField< float >&
      scores() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_scores();

  // optional bool success = 3;
  void clear_success();
  static const int kSuccessFieldNumber = 3;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:speech.SpeechOutputUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pinyins_;
  ::google::protobuf::RepeatedField< float > scores_;
  mutable int _scores_cached_byte_size_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static SpeechOutputUnit* default_instance_;
};
// -------------------------------------------------------------------

class CLMInput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speech.CLMInput) */ {
 public:
  CLMInput();
  virtual ~CLMInput();

  CLMInput(const CLMInput& from);

  inline CLMInput& operator=(const CLMInput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLMInput& default_instance();

  void Swap(CLMInput* other);

  // implements Message ----------------------------------------------

  inline CLMInput* New() const { return New(NULL); }

  CLMInput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLMInput& from);
  void MergeFrom(const CLMInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CLMInput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .speech.CLMInputUnit cinput = 1;
  int cinput_size() const;
  void clear_cinput();
  static const int kCinputFieldNumber = 1;
  const ::speech::CLMInputUnit& cinput(int index) const;
  ::speech::CLMInputUnit* mutable_cinput(int index);
  ::speech::CLMInputUnit* add_cinput();
  ::google::protobuf::RepeatedPtrField< ::speech::CLMInputUnit >*
      mutable_cinput();
  const ::google::protobuf::RepeatedPtrField< ::speech::CLMInputUnit >&
      cinput() const;

  // @@protoc_insertion_point(class_scope:speech.CLMInput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::speech::CLMInputUnit > cinput_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static CLMInput* default_instance_;
};
// -------------------------------------------------------------------

class CLMInputUnit : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speech.CLMInputUnit) */ {
 public:
  CLMInputUnit();
  virtual ~CLMInputUnit();

  CLMInputUnit(const CLMInputUnit& from);

  inline CLMInputUnit& operator=(const CLMInputUnit& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLMInputUnit& default_instance();

  void Swap(CLMInputUnit* other);

  // implements Message ----------------------------------------------

  inline CLMInputUnit* New() const { return New(NULL); }

  CLMInputUnit* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLMInputUnit& from);
  void MergeFrom(const CLMInputUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CLMInputUnit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string pinyin_list = 1;
  int pinyin_list_size() const;
  void clear_pinyin_list();
  static const int kPinyinListFieldNumber = 1;
  const ::std::string& pinyin_list(int index) const;
  ::std::string* mutable_pinyin_list(int index);
  void set_pinyin_list(int index, const ::std::string& value);
  void set_pinyin_list(int index, const char* value);
  void set_pinyin_list(int index, const char* value, size_t size);
  ::std::string* add_pinyin_list();
  void add_pinyin_list(const ::std::string& value);
  void add_pinyin_list(const char* value);
  void add_pinyin_list(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& pinyin_list() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pinyin_list();

  // @@protoc_insertion_point(class_scope:speech.CLMInputUnit)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pinyin_list_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static CLMInputUnit* default_instance_;
};
// -------------------------------------------------------------------

class CLMOutput : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:speech.CLMOutput) */ {
 public:
  CLMOutput();
  virtual ~CLMOutput();

  CLMOutput(const CLMOutput& from);

  inline CLMOutput& operator=(const CLMOutput& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLMOutput& default_instance();

  void Swap(CLMOutput* other);

  // implements Message ----------------------------------------------

  inline CLMOutput* New() const { return New(NULL); }

  CLMOutput* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLMOutput& from);
  void MergeFrom(const CLMOutput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CLMOutput* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string coutput = 1;
  int coutput_size() const;
  void clear_coutput();
  static const int kCoutputFieldNumber = 1;
  const ::std::string& coutput(int index) const;
  ::std::string* mutable_coutput(int index);
  void set_coutput(int index, const ::std::string& value);
  void set_coutput(int index, const char* value);
  void set_coutput(int index, const char* value, size_t size);
  ::std::string* add_coutput();
  void add_coutput(const ::std::string& value);
  void add_coutput(const char* value);
  void add_coutput(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& coutput() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_coutput();

  // @@protoc_insertion_point(class_scope:speech.CLMOutput)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> coutput_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_speech_2eproto();
  friend void protobuf_AssignDesc_speech_2eproto();
  friend void protobuf_ShutdownFile_speech_2eproto();

  void InitAsDefaultInstance();
  static CLMOutput* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SpeechInput

// repeated bytes sinput = 1;
inline int SpeechInput::sinput_size() const {
  return sinput_.size();
}
inline void SpeechInput::clear_sinput() {
  sinput_.Clear();
}
inline const ::std::string& SpeechInput::sinput(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechInput.sinput)
  return sinput_.Get(index);
}
inline ::std::string* SpeechInput::mutable_sinput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.SpeechInput.sinput)
  return sinput_.Mutable(index);
}
inline void SpeechInput::set_sinput(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.SpeechInput.sinput)
  sinput_.Mutable(index)->assign(value);
}
inline void SpeechInput::set_sinput(int index, const char* value) {
  sinput_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.SpeechInput.sinput)
}
inline void SpeechInput::set_sinput(int index, const void* value, size_t size) {
  sinput_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.SpeechInput.sinput)
}
inline ::std::string* SpeechInput::add_sinput() {
  // @@protoc_insertion_point(field_add_mutable:speech.SpeechInput.sinput)
  return sinput_.Add();
}
inline void SpeechInput::add_sinput(const ::std::string& value) {
  sinput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.SpeechInput.sinput)
}
inline void SpeechInput::add_sinput(const char* value) {
  sinput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.SpeechInput.sinput)
}
inline void SpeechInput::add_sinput(const void* value, size_t size) {
  sinput_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.SpeechInput.sinput)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpeechInput::sinput() const {
  // @@protoc_insertion_point(field_list:speech.SpeechInput.sinput)
  return sinput_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SpeechInput::mutable_sinput() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechInput.sinput)
  return &sinput_;
}

// -------------------------------------------------------------------

// SpeechOutput

// repeated .speech.SpeechOutputUnit soutput = 1;
inline int SpeechOutput::soutput_size() const {
  return soutput_.size();
}
inline void SpeechOutput::clear_soutput() {
  soutput_.Clear();
}
inline const ::speech::SpeechOutputUnit& SpeechOutput::soutput(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutput.soutput)
  return soutput_.Get(index);
}
inline ::speech::SpeechOutputUnit* SpeechOutput::mutable_soutput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.SpeechOutput.soutput)
  return soutput_.Mutable(index);
}
inline ::speech::SpeechOutputUnit* SpeechOutput::add_soutput() {
  // @@protoc_insertion_point(field_add:speech.SpeechOutput.soutput)
  return soutput_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::speech::SpeechOutputUnit >*
SpeechOutput::mutable_soutput() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechOutput.soutput)
  return &soutput_;
}
inline const ::google::protobuf::RepeatedPtrField< ::speech::SpeechOutputUnit >&
SpeechOutput::soutput() const {
  // @@protoc_insertion_point(field_list:speech.SpeechOutput.soutput)
  return soutput_;
}

// -------------------------------------------------------------------

// SpeechOutputUnit

// repeated string pinyins = 1;
inline int SpeechOutputUnit::pinyins_size() const {
  return pinyins_.size();
}
inline void SpeechOutputUnit::clear_pinyins() {
  pinyins_.Clear();
}
inline const ::std::string& SpeechOutputUnit::pinyins(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutputUnit.pinyins)
  return pinyins_.Get(index);
}
inline ::std::string* SpeechOutputUnit::mutable_pinyins(int index) {
  // @@protoc_insertion_point(field_mutable:speech.SpeechOutputUnit.pinyins)
  return pinyins_.Mutable(index);
}
inline void SpeechOutputUnit::set_pinyins(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.SpeechOutputUnit.pinyins)
  pinyins_.Mutable(index)->assign(value);
}
inline void SpeechOutputUnit::set_pinyins(int index, const char* value) {
  pinyins_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.SpeechOutputUnit.pinyins)
}
inline void SpeechOutputUnit::set_pinyins(int index, const char* value, size_t size) {
  pinyins_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.SpeechOutputUnit.pinyins)
}
inline ::std::string* SpeechOutputUnit::add_pinyins() {
  // @@protoc_insertion_point(field_add_mutable:speech.SpeechOutputUnit.pinyins)
  return pinyins_.Add();
}
inline void SpeechOutputUnit::add_pinyins(const ::std::string& value) {
  pinyins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.SpeechOutputUnit.pinyins)
}
inline void SpeechOutputUnit::add_pinyins(const char* value) {
  pinyins_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.SpeechOutputUnit.pinyins)
}
inline void SpeechOutputUnit::add_pinyins(const char* value, size_t size) {
  pinyins_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.SpeechOutputUnit.pinyins)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SpeechOutputUnit::pinyins() const {
  // @@protoc_insertion_point(field_list:speech.SpeechOutputUnit.pinyins)
  return pinyins_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SpeechOutputUnit::mutable_pinyins() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechOutputUnit.pinyins)
  return &pinyins_;
}

// repeated float scores = 2;
inline int SpeechOutputUnit::scores_size() const {
  return scores_.size();
}
inline void SpeechOutputUnit::clear_scores() {
  scores_.Clear();
}
inline float SpeechOutputUnit::scores(int index) const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutputUnit.scores)
  return scores_.Get(index);
}
inline void SpeechOutputUnit::set_scores(int index, float value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:speech.SpeechOutputUnit.scores)
}
inline void SpeechOutputUnit::add_scores(float value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:speech.SpeechOutputUnit.scores)
}
inline const ::google::protobuf::RepeatedField< float >&
SpeechOutputUnit::scores() const {
  // @@protoc_insertion_point(field_list:speech.SpeechOutputUnit.scores)
  return scores_;
}
inline ::google::protobuf::RepeatedField< float >*
SpeechOutputUnit::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:speech.SpeechOutputUnit.scores)
  return &scores_;
}

// optional bool success = 3;
inline void SpeechOutputUnit::clear_success() {
  success_ = false;
}
inline bool SpeechOutputUnit::success() const {
  // @@protoc_insertion_point(field_get:speech.SpeechOutputUnit.success)
  return success_;
}
inline void SpeechOutputUnit::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:speech.SpeechOutputUnit.success)
}

// -------------------------------------------------------------------

// CLMInput

// repeated .speech.CLMInputUnit cinput = 1;
inline int CLMInput::cinput_size() const {
  return cinput_.size();
}
inline void CLMInput::clear_cinput() {
  cinput_.Clear();
}
inline const ::speech::CLMInputUnit& CLMInput::cinput(int index) const {
  // @@protoc_insertion_point(field_get:speech.CLMInput.cinput)
  return cinput_.Get(index);
}
inline ::speech::CLMInputUnit* CLMInput::mutable_cinput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.CLMInput.cinput)
  return cinput_.Mutable(index);
}
inline ::speech::CLMInputUnit* CLMInput::add_cinput() {
  // @@protoc_insertion_point(field_add:speech.CLMInput.cinput)
  return cinput_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::speech::CLMInputUnit >*
CLMInput::mutable_cinput() {
  // @@protoc_insertion_point(field_mutable_list:speech.CLMInput.cinput)
  return &cinput_;
}
inline const ::google::protobuf::RepeatedPtrField< ::speech::CLMInputUnit >&
CLMInput::cinput() const {
  // @@protoc_insertion_point(field_list:speech.CLMInput.cinput)
  return cinput_;
}

// -------------------------------------------------------------------

// CLMInputUnit

// repeated string pinyin_list = 1;
inline int CLMInputUnit::pinyin_list_size() const {
  return pinyin_list_.size();
}
inline void CLMInputUnit::clear_pinyin_list() {
  pinyin_list_.Clear();
}
inline const ::std::string& CLMInputUnit::pinyin_list(int index) const {
  // @@protoc_insertion_point(field_get:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_.Get(index);
}
inline ::std::string* CLMInputUnit::mutable_pinyin_list(int index) {
  // @@protoc_insertion_point(field_mutable:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_.Mutable(index);
}
inline void CLMInputUnit::set_pinyin_list(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.CLMInputUnit.pinyin_list)
  pinyin_list_.Mutable(index)->assign(value);
}
inline void CLMInputUnit::set_pinyin_list(int index, const char* value) {
  pinyin_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.CLMInputUnit.pinyin_list)
}
inline void CLMInputUnit::set_pinyin_list(int index, const char* value, size_t size) {
  pinyin_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.CLMInputUnit.pinyin_list)
}
inline ::std::string* CLMInputUnit::add_pinyin_list() {
  // @@protoc_insertion_point(field_add_mutable:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_.Add();
}
inline void CLMInputUnit::add_pinyin_list(const ::std::string& value) {
  pinyin_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.CLMInputUnit.pinyin_list)
}
inline void CLMInputUnit::add_pinyin_list(const char* value) {
  pinyin_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.CLMInputUnit.pinyin_list)
}
inline void CLMInputUnit::add_pinyin_list(const char* value, size_t size) {
  pinyin_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.CLMInputUnit.pinyin_list)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CLMInputUnit::pinyin_list() const {
  // @@protoc_insertion_point(field_list:speech.CLMInputUnit.pinyin_list)
  return pinyin_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CLMInputUnit::mutable_pinyin_list() {
  // @@protoc_insertion_point(field_mutable_list:speech.CLMInputUnit.pinyin_list)
  return &pinyin_list_;
}

// -------------------------------------------------------------------

// CLMOutput

// repeated string coutput = 1;
inline int CLMOutput::coutput_size() const {
  return coutput_.size();
}
inline void CLMOutput::clear_coutput() {
  coutput_.Clear();
}
inline const ::std::string& CLMOutput::coutput(int index) const {
  // @@protoc_insertion_point(field_get:speech.CLMOutput.coutput)
  return coutput_.Get(index);
}
inline ::std::string* CLMOutput::mutable_coutput(int index) {
  // @@protoc_insertion_point(field_mutable:speech.CLMOutput.coutput)
  return coutput_.Mutable(index);
}
inline void CLMOutput::set_coutput(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:speech.CLMOutput.coutput)
  coutput_.Mutable(index)->assign(value);
}
inline void CLMOutput::set_coutput(int index, const char* value) {
  coutput_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:speech.CLMOutput.coutput)
}
inline void CLMOutput::set_coutput(int index, const char* value, size_t size) {
  coutput_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:speech.CLMOutput.coutput)
}
inline ::std::string* CLMOutput::add_coutput() {
  // @@protoc_insertion_point(field_add_mutable:speech.CLMOutput.coutput)
  return coutput_.Add();
}
inline void CLMOutput::add_coutput(const ::std::string& value) {
  coutput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:speech.CLMOutput.coutput)
}
inline void CLMOutput::add_coutput(const char* value) {
  coutput_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:speech.CLMOutput.coutput)
}
inline void CLMOutput::add_coutput(const char* value, size_t size) {
  coutput_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:speech.CLMOutput.coutput)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CLMOutput::coutput() const {
  // @@protoc_insertion_point(field_list:speech.CLMOutput.coutput)
  return coutput_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CLMOutput::mutable_coutput() {
  // @@protoc_insertion_point(field_mutable_list:speech.CLMOutput.coutput)
  return &coutput_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace speech

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_speech_2eproto__INCLUDED
